Implicit Returns - Methods in Ruby will automatically return the evaluation of their last executed expression. You will still need to use the explicit return keyword to do an early return.

Omitting parentheses for method calls with no arguments - When calling a method without passing any arguments, we'll often drop the parentheses altogether.

Use single line conditionals when possible - When we have a single line in the body of a simple if statement (that is not attached to an elsif or else), we can turn it into a one-liner: puts "dont forget an umbrella" if raining

Use built-in methods -

p num % 2 == 0
# Preferred by a Rubyist
p num.even?

p people[people.length - 1]

# Preferred by a Rubyist
p people[-1]
p people.last

def repeat_hi(num)
    num.times { puts "hi" }
end


def all_numbers_even?(nums)
    nums.all? { |num| num.even? }
end

all?
Return true when all elements result in true when passed into the block.

p [2, 4, 6].all? { |el| el.even? }  # => true
p [2, 3, 6].all? { |el| el.even? }  # => false

any?
Return true when all at least one element results in true when passed into the block.

p [3, 4, 7].any? { |el| el.even? }  # => true
p [3, 5, 7].any? { |el| el.even? }  # => false

none?
Return true when no elements result in true when passed into the block.

p [1, 3, 5].none? { |el| el.even? } # => true
p [1, 4, 5].none? { |el| el.even? } # => false

one?
Return true when exactly one element results in true when passed into the block.

p [1, 4, 5].one? { |el| el.even? }  # => true
p [1, 4, 6].one? { |el| el.even? }  # => false
p [1, 3, 5].one? { |el| el.even? }  # => false

count
Return a number representing the count of elements that result in true when passed into the block.

p [1, 2, 3, 4, 5, 6].count { |el| el.even? }    # => 3
p [1, 3, 5].count { |el| el.even? }             # => 0

sum
Return the total sum of all elements

p [1, -3, 5].sum   # => 3

max and min
Return the maximum or minimum element

p [1, -3, 5].min    # => -3
p [1, -3, 5].max    # => 5
p [].max            # => nil

flatten
Return the 1 dimensional version of any multidimensional array

multi_d = [
    [["a", "b"], "c"],
    [["d"], ["e"]],
    "f"
]

p multi_d.flatten   # => ["a", "b", "c", "d", "e", "f"]

Here are the core RSpec terms you'll see in every spec file:

describe names the method being tested
it expresses the expected behavior of the method being tested
expect shows how that behavior is tested

--PRY--
You can begin a pry session simply by using the command pry in your command line.
You can use ls to list methods that you can use in a given context. For example, you can see what methods you have available to use on strings by entering ls String.
You can use ri, which is built into Ruby, to show the documentation for a given method. For example, if you want to learn more about the end_with? method from the example above, you can run ri String#end_with?. (Be sure to use Class#method for instance methods and Class::method for class methods.)
load is another method built into Ruby that you'll use often in Pry. It allows you to load an entire .rb file into Pry and begin playing with it.

--OOP--

Abstraction
In OOP, abstraction is the process of exposing essential features of an object while hiding inner details that are not necessary to using the feature. Take this analogy: Many drivers do not understand the mechanical details of how a steering wheel works, but they can still use the steering wheel to drive a car. In a similar way, our classes should have methods that are simple to use because they hide complex logic inside of them. Let's explore some examples.

Encapsulation
Similar to abstraction, encapsulation closely relates methods and data attributes together with the hope of preventing misuse. For us, the goal of encapsulation is to give users access to the things that are safe for them to use. Some data we may choose to keep private or purposefully hide from outside users for the sake of security. One common way to encapsulate data attributes is by making them only accessible through methods that we explicitly design as programmers!

--RECURSION--

In programming, Recursion is when a method calls itself. As we have seen during the course, using helper methods can be very useful when it comes to solving problems. In our classic helper method examples, we have commonly called methods from other methods. Recursion is a similar process except we are calling the same method.

In recursive methods, we need to implement a way to stop the recursive loop and prevent it from looping forever. We took care of the infinite loop issue in our countDown by using an if statement that prevents another recursive call. In general, we call such a statement the base case

A recursive method consists of two fundamental parts:

the base case where we halt the recursion by not making a further call
the recursive step where we continue the recursion by making another subsequent call

--SQL--

SQL stores data in tables. NoSQL stores data in forms other than tables. These other forms can be graphs, key-value pairs, or one of many other options, but most commonly they are documents. Documents are very similar to JSON objects with field-value pairs. For example, our NoSQL database might store a user like this:

Your DATABASE SCHEMA is a description of the organization of your database into tables and columns.

When implementing a database schema, you must decide on three things:

- The tables you will have
- The columns each of those tables will have
- The data type of each of those columns

SQL is not quite so flexible; you must specify the type of data that will go into each column.

Here are a few of the most common data types:

BOOLEAN
INT
FLOAT (stores "floating point" numbers)
VARCHAR(255) (essentialy a string with a length limit of 255 chars)
TEXT (a string of unlimited length)
DATE
DATETIME
TIME
BLOB (non-textual, binary data; e.g., an image)

FOREIGN KEYS are how we model relationships between pieces of data across multiple tables. This also allows us to ensure that data is not duplicated across our database. Posts live in a single place, users in another, and the foreign key (user_id) in posts expresses the relation between the one and the other.

SQL provides powerful filtering with WHERE. It supports the standard comparison and equality operators (<, >, >=, <=, =, !=) as well as boolean operators (AND, OR, NOT).

------------------------------------------------------------------------------------
HERE ARE THE STEPS FOR STARTING A NEW RAILS PROJECT.

Make sure that Rails is installed.

gem install rails
(You can skip this step if you are sure that you have previously installed Rails.)

Generate a new Rails project.

rails new demo_project -G -T -d=postgresql --minimal
This will create a folder, demo_project, with a bunch of Rails directories in it.

By default, Rails will also initialize your new project as a git repository. Adding the -G flag will instruct Rails to create a project without making a new repository. This will be useful since you'll frequently be creating Rails projects inside of the repository for the day's projects, and you want to avoid nesting git repositories inside of other git repositories. If you're making a repository for a single project, however, you can leave this flag off and Rails will automatically set one up for you.

The -T flag tells Rails to skip setting up its internal Test::Unit files. If you do not include this flag, Rails will configure your app to follow its testing protocols. This includes adding an additional test folder (with 8 sub-folders) that it will then populate with skeleton tests whenever you generate a model, controller, etc. Since you won't be using these tests, including the -T flag will help keep your codebase clean and eliminate some developmental overhead.

The -d flag (or --database) allows you to specify the database for your project. It will add the correct gem and set up sensible defaults in config/database.yml for the specified database. Rails defaults to sqlite3, but you will usually want to use postgresql in this course. Accordingly, unless a practice's instructions explicitly tell you to do otherwise, always add this flag to switch the database to PostgreSQL.

Finally, --minimal instructs Rails to build a minimalist application. As a result, it will not install Action Cable, Action Mailbox, Action Mailer, Action Text, Active Job, Active Storage, Bootsnap, Web Console, JavaScript, Jbuilder, System Tests, or Hotwire (i.e., Turbo and Stimulus). Those names probably don't mean much to you now. Rails includes them all by default to help make your programming life easier, but they are not features that your applications will need right now. While in App Academy, default to using --minimal unless the instructions tell you otherwise. (If you omit the --minimal flag, everything will still work, you will just have many more files and directories to sort through.)

Add helpful gems to your Gemfile (located in your new demo_project folder).

Rails sets you up with a bunch of gems by default, but there are a few other gems that will make your life much easier. You should get in the habit of adding the following:

For now, change the default debug gem listed under group :development, :test to trusty byebug instead:

group :development, :test do
  gem "byebug", platforms: %i[ mri mingw x64_mingw ]
end
(Always make sure that .byebug_history is included in your .gitignore file whenever you use byebug. Since Rails defaults to debug, it does not include .byebug_history in the default .gitignore that it produces.)

Next, add the following gems under group :development:

group :development do
  # Run `bundle exec annotate --models` in Terminal to add helpful comments
  # to models.
  gem "annotate"
  
  # Enable `rails console` to open with pry (pry > irb)
  gem "pry-rails"
end
(When you move to the Rails module, you will want to add two more gems to the development group: better_errors and binding_of_caller.)

When you have made those changes, make sure you are in the demo_project directory and run bundle install. This will look for a Gemfile and then install the gems listed in it. Remember to run bundle install whenever you make changes to your Gemfile.


PostgreSQL
As noted above, you can initialize a new Rails app with a PostgreSQL database by using the --database=postgresql option. You can also switch an existing Rails app from SQLite to Postgres. This is convenient because differences between your development and production databases can be frustrating.

If you have already created your SQLite database by running db:create, then delete the .sqlite3 files in db/.

Replace the gem 'sqlite3' line in the Gemfile with gem 'pg'. Don't forget to bundle install after.

Edit config/database.yml to use PostgreSQL.

Change the default environment:

default: &default
  adapter: postgresql
  pool: 5
  timeout: 5000
Create a database with the given project name. Name your development, test, and production databases as shown below, substituting appropriately for <project_name>:

development:
  <<: *default
  database: <project_name>_development
For production, also add the username and password:

production:
  <<: *default
  database: <project_name>_production
  username: <project_name>
  password: <%= ENV["<PROJECT_NAME>_DATABASE_PASSWORD"] %>
Create your new Postgres database

Run rails db:create
If you have migrations, run rails db:migrate
If you have seeds, run rails db:seed

------------------------------------------------------------------------------------
MIGRATIONS

A migration is a file containing Ruby code that describes a set of changes applied to the database. It may create or drop tables; it may add or remove columns from a table. Each new set of changes is written inside a new migration file, which is checked into the repository. Active Record will take responsibility for performing the necessary migrations when you ask it.